x<- list(a = 1:5, b = rnorm(10))
x
lapply(x, mean)
?runif
?abs
x <- lapply(x, abs)
x
lapply(x, mean)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(ext) ext[,1])
lapply(x, function(ext) ext[1,])
lapply(lapply(x, function(ext) ext[1,]), function(mmm) mmm[1])
lapply(lapply(x, function(ext) ext[1,]), function(mmm) mmm[-1])
lapply(lapply(x, function(ext) ext[1,]), function(mmm) mmm[-2])
sapply(lapply(x, function(ext) ext[1,]), function(mmm) mmm[-2])
sapply(x, function(ext) ext[1,])
mean(x)
y <- 1:6
mean(y)
lapply(lapply(x, function(ext) ext[1,]), function(mmm) mmm[-2])
lapply(x, function(ext) ext[1,])
mean(lapply(x, function(ext) ext[1,]))
lapply((lapply(x, function(ext) ext[1,])) mean)
lapply(lapply(x, function(ext) ext[1,])) mean)
lapply(lapply(x, function(ext) ext[1,]) mean)
lapply(lapply(x, function(ext) ext[1,]), mean)
str(apply)
x <- matrix(rnorm(200, 20, 10))
apply(x, 2, mean)
apply(x, 1, sum)
x <- matrix(rnorm(200) 20, 10))
x <- matrix(rnorm(200), 20, 10))
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
rowSums(x)
]colMeans(x)
colMeans(x)
apply(x, 1, quantile, probs = c(0.25, 0.75))
?quantile
mapply(rep, 1:5, 5:1)
mapply(rep, lapply(1:5, function(mmm), *2), 5:1)
mapply(rep, lapply(1:5, function(mmm), mmm[*2]), 5:1)
mapply(rep, lapply(1:5, function(mmm) mmm[*2]), 5:1)
mapply(rep, lapply(1:5, function(mmm) *2), 5:1)
?gl
mapply(rep, lapply(1:5, function(mmm) mmm*2), 5:1)
?interaction
log(-1)
log(1/0)
?invisible
?rbind
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
lapply(class(flags))
cls_list <- lapply(flags, class)
clas_list
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
viewinof(flags)
viewinfo(flags)
viewinfo()
library(datasets)
data(iris)
apply(iris$Sepal.Length, iris$Species, mean)
iris
lapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
abs(tapply(mtcars$mpg, mtcars$cyl, mean)[1]-tapply(mtcars$mpg, mtcars$cyl, mean)[3])
abs(tapply(mtcars$hp, mtcars$cyl, mean)[1]-tapply(mtcars$hp, mtcars$cyl, mean)[3])
tapply(mtcars$hp, mtcars$cyl, mean)
apply(iris[, 1:4], 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x$setsolve(m)
}
MyMatrix <- makeCacheMatrix(matrix(c(1,2,2,1)))
MyMatrix
MyMatrix(get())
makeCacheMatrix()
undebug()
undebug(ls)
x <- makeCacheMatrix(c(1,2,2,1), nrow = 2, ncol = 2)
x <- makeCacheMatrix(matrix(c(1,2,2,1), nrow = 2, ncol = 2))
x
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x$setsolve(m)
m
}
x <- makeCacheMatrix(matrix(c(1,2,2,1), nrow = 2, ncol = 2))
cacheSolve(x)
myMatrx$get()
myMatrix$get()
MyMatrix$get()
matrix(c(1,2,2,1), nrow = 2, ncol = 2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
matrix(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x$setsolve(m)
m
}
x <- makeCacheMatrix(matrix(c(1,2,2,1), nrow = 2, ncol = 2))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x<- solve(data, ...)
x$setsolve(m)
m
}
x <- makeCacheMatrix(matrix(c(1,2,2,1), nrow = 2, ncol = 2))
x
x$get()
x$getsolve()
x <- matrix(c(1,2,2,1), nrow = 2, ncol = 2)
solve(x)
x <- makeCacheMatrix(matrix(c(1,2,2,1), nrow = 2, ncol = 2))
x$setsolve()
x$get
x$get()
x$getsolve
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
data.frame(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x <- solve(data, ...)
x$setsolve(m)
m
}
x <- makeCacheMatrix(matrix(c(1,2,2,1), nrow = 2, ncol = 2))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x <- solve(data, ...)
x$setsolve(m)
m
}
x <- makeCacheMatrix(matrix(c(1,2,2,1), nrow = 2, ncol = 2))
x$get()
x$set()
x$set(matrix(c(1,3,3,1), nrow=2,ncol=2))
x$get()
x$setsolve()
x$getsolve()
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x <- solve(data)
x$setsolve(m)
m
}
x <- makeCacheMatrix(matrix(c(1,2,2,1), nrow = 2, ncol = 2))
x$get()
x$getsolve()
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x <- solve(data)
x
x$setsolve(m)
m
}
x
x <- makeCacheMatrix(matrix(c(1,2,2,1), nrow = 2, ncol = 2))
x$get()
x$getsolve()
cachesolve(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x <- solve(data)
print(x)
x$setsolve(m)
m
}
x <- makeCacheMatrix(matrix(c(1,2,2,1), nrow = 2, ncol = 2))
x$get()
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolve(m)
m
}
x <- makeCacheMatrix(matrix(c(1,2,2,1), nrow = 2, ncol = 2))
x$get()
cacheSolve(x)
x$get()
cacheSolve(x)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
?ppois
swirl()
library(swirl)
ls <- (rm(ls))
ls
swirl()
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size((plants))
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, mean = 10)
rpois(5, 10)
?replicate
replicate(100, rpois(5,10))
sapply(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
help(cars)
head(cars)
summary(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
?plot
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, points = 2)
plot(cars, pchisq() = 2)
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl)
data = mtcars
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
source('D:/Downloads/rprog_data_ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
setwd("D:/Downloads/rprog_data_ProgAssignment3-data/")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source('D:/Downloads/rprog_data_ProgAssignment3-data/rankhospital.R')
?tail
rankhospital("MD", "heart attack", "worst")
source('D:/Downloads/rprog_data_ProgAssignment3-data/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('D:/Downloads/rprog_data_ProgAssignment3-data/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('D:/Downloads/rprog_data_ProgAssignment3-data/rankhospital.R')
source('D:/Downloads/rprog_data_ProgAssignment3-data/best.R')
?split
source('D:/Downloads/rprog_data_ProgAssignment3-data/rankall.R')
rankall("heart attack")
source('D:/Downloads/rprog_data_ProgAssignment3-data/rankall.R')
rankall("heart attack")
source('D:/Downloads/rprog_data_ProgAssignment3-data/rankall.R')
rankall("heart attack")
source('D:/Downloads/rprog_data_ProgAssignment3-data/rankall.R')
rankall("heart attack")
source('D:/Downloads/rprog_data_ProgAssignment3-data/rankall.R')
